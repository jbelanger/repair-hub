// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(cuid())
  name             String
  email            String   @unique
  role             String // "TENANT", "LANDLORD", "ADMIN"
  phone            String?
  address          String   @unique // Ethereum address
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Properties owned by this user (if they're a landlord)
  ownedProperties  Property[]      @relation("LandlordProperties")
  // Property leases for this user (if they're a tenant)
  propertyLeases   PropertyTenant[]
  // Repair requests initiated by this user
  initiatedRequests RepairRequest[] @relation("InitiatedRequests")
}

model Property {
  id         String          @id @default(cuid())
  address    String
  placeId    String         // Google Places ID for address validation
  // The landlord who owns this property
  landlord   User            @relation("LandlordProperties", fields: [landlordId], references: [id])
  landlordId String
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  // Tenant leases for this property
  tenantLeases    PropertyTenant[]
  // Pending invitations for this property
  invitations     TenantInvitation[]
  // Repair requests for this property
  repairs         RepairRequest[]
}

model PropertyTenant {
  id         String   @id @default(cuid())
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String
  tenant     User     @relation(fields: [tenantId], references: [id])
  tenantId   String
  startDate  DateTime
  endDate    DateTime
  status     String   // "ACTIVE", "EXPIRED", "TERMINATED"
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Repair requests made during this lease
  repairs    RepairRequest[]
}

model TenantInvitation {
  id         String   @id @default(cuid())
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String
  email      String
  startDate  DateTime
  endDate    DateTime
  status     String   // "PENDING", "ACCEPTED", "EXPIRED"
  createdAt  DateTime @default(now())
  expiresAt  DateTime
}

model RepairRequest {
  id             String    @id // This will match the blockchain ID
  // The user who initiated the request
  initiator      User      @relation("InitiatedRequests", fields: [initiatorId], references: [id])
  initiatorId    String
  // The property this request is for
  property       Property  @relation(fields: [propertyId], references: [id])
  propertyId     String
  // The lease under which this request was made
  lease          PropertyTenant @relation(fields: [leaseId], references: [id])
  leaseId        String
  description    String
  descriptionHash String   // Hash of the repair description for blockchain verification
  workDetails    String?   // Details of work to be done/completed
  workDetailsHash String?  // Hash of the work details for blockchain verification
  urgency        String    // "LOW", "MEDIUM", "HIGH"
  status         String    // "PENDING", "IN_PROGRESS", "COMPLETED", "ACCEPTED", "REFUSED", "REJECTED", "CANCELLED"
  attachments    String    // IPFS hashes, comma-separated
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}
